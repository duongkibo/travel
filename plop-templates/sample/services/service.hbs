import { Injectable } from '@nestjs/common';
import { FindOneOptions } from 'typeorm';
import { {{> repositoryName}} } from '../repositories/{{kebabCase name}}.repository';
import { {{> modelName}}, {{> paginationConnectionName}} } from '../entities/{{kebabCase name}}.entity';
import { PaginationArgs } from 'src/graphql/types/common.args';

@Injectable()
export class {{> serviceName}} {
    constructor(private readonly {{> repositoryInstanceName}}: {{> repositoryName}}) {}

    findOneOrFail = (data: FindOneOptions<{{> modelName}}>): Promise<{{> modelName}}> => this.{{> repositoryInstanceName}}.findOneOrFail(data);
    pagination = async (data: PaginationArgs): Promise<{{> paginationConnectionName}}> => {
        return this.{{> repositoryInstanceName}}.paginationBase(data);
    };

    create(data: Partial<{{> modelName}}>): Promise<{{> modelName}}> {
        const entity = new {{> modelName}}(data);
        return this.{{> repositoryInstanceName}}.save(entity);
    }

    async update(id: string, data: Partial<{{> modelName}}>): Promise<{{> modelName}}> {
        await this.{{> repositoryInstanceName}}.update(id, data);
        return this.{{> repositoryInstanceName}}.findOneOrFail(id);
    }

    async remove(id: string): Promise<boolean> {
        await this.{{> repositoryInstanceName}}.delete(id);
        return true;
    }
}
